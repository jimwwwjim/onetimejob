echo "# onetimejob" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/jimwwwjim/onetimejob.git
git push -u origin master


# -*- coding: utf-8 -*-
"""
Created on Mon Apr  8 08:22:19 2019

@author: JIMWWWJIM
"""



#------  package imported  -----
from WindPy import *
import pandas as pd
import numpy as np
from math import exp, log
import datetime as dt
import matplotlib.pyplot as plt
w.start()
p = print

# -----  data extract  ------
wsi_data = w.wsi("510050.SH", "close", "2015-04-08 09:00:00", "2019-04-08 09:30:02", "BarSize=60")
ua_data = wsi_data.Data
ua_data = ua_data[0]
ua_times = wsi_data.Times
ua = wsi_data.Codes
ua_index = wsi_data.Fields

# ---- exercise price / k ----
K_list = []
call_tradecode = []
put_tradecode = []
call_price = []
put_price = []
remain_t = []
r_f = []

for i in ua_data:
	a = i * 1000 - int(i * 10) * 100
	if a <= 25 and a >= 0:
		b = 0
	elif a <= 75 and a > 25:
		b = 50
	elif a > 75:
		b = 100
	else:
		p('sth wrong')
		break
	c = (int(i * 10) * 100 + b)/1000
	K_list.append('%.2f' % c)

if len(K_list) == len(ua_times):
	for i in range(len(K_list)):
		time_ = ua_times[i]
		K_ = K_list[i]
		#p(time_)
		#p(K_)
		#datetime tuple/getting exercise date
		time_1 = time_.timetuple()
		time_moment = []
		for fig in time_1:
			time_moment.append(fig)
		yr_ = time_moment[0]
		mon_ = time_moment[1]
		day_ = time_moment[2]
		hr_ = time_moment[3]
		min_ = time_moment[4]
		if mon_ == 12:
			mon_1 = 1
			yr_ = yr_ + 1
		else:
			mon_1 = mon_ + 1
		if mon_1 < 10:
			exercise_date = str(yr_)+str(0)+str(mon_1)
		else:
			exercise_date = str(yr_)+str(mon_1)
		
		#  getting trade code
		optiontype = 'C'
		parameter_for_tradecode = 'SettlementMonth=' + exercise_date + ';'+'Exerciseprice='+ K_ + ';' + 'Optiontype=' + optiontype + ';Adjustmentstate=M'
		wss_tradecode = w.wss("510050.SH", "options_tradecode",parameter_for_tradecode)
		tradecode = wss_tradecode.Data
		tradecode = tradecode[0]    # tradecode of ATM call option
		optiontype = 'P'
		parameter_for_tradecode = 'SettlementMonth=' + exercise_date + ';'+'Exerciseprice='+ K_ + ';' + 'Optiontype=' + optiontype + ';Adjustmentstate=M'
		wss_tradecode = w.wss("510050.SH", "options_tradecode",parameter_for_tradecode)
		tradecode_ = wss_tradecode.Data
		tradecode_ = tradecode_[0]    #tradecode of ATM put option
		#p(tradecode)
		#p(tradecode_)
		#    trade code list 
		call_tradecode.append(tradecode)
		put_tradecode.append(tradecode_)
		#    getting real time price of ATM call and put
		time_1 = time_ - dt.timedelta(0,10)
		time_2 = time_ + dt.timedelta(0,10)
		call_wsi = w.wsi(tradecode, "close", time_1, time_2, "BarSize=1")
		put_wsi = w.wsi(tradecode_,'close',time_1,time_2,'BarSize=1')
		#    gettting trade day and then get the remaing time(tradays)
		lastradingdate_wss = w.wss(tradecode,'lasttradingdate')
		lastradingdate = lastradingdate_wss.Data[0][0]
		t_remain = (lastradingdate - time_).days
		remain_t.append(t_remain)
		#p(type(trade_day))
		
		# getting shibor 1 month as risk free rate
		if mon_ < 10:
			trade_day = str(yr_) + str(0) + str(mon_) + str(day_)
		else:
			trade_day = str(yr_) + str(mon_) + str(day_)
		par_shibor = 'tradedate=' + trade_day + ';priceAdj=U;cycle=D'
		shibor_wss = w.wss('SHIBOR1M.IR','close',par_shibor)
		shibor = shibor_wss.Data[0][0]
		r_f.append(shibor)
		call_ = call_wsi.Data[0][0]
		put_ = put_wsi.Data[0][0]
		#p(call_)
		#p(put_)
		call_price.append(call_)
		put_price.append(put_)
        
        # put call parity misprice
        
        # 

#p(call_price)
#p(put_price)
		
		

dic = {'510050.SH/S':ua_data,'times':ua_times,'K':K_list,'call_tradecode':call_tradecode,'put_tradecode':put_tradecode,'call_price':call_price,'put_price':put_price,'r_f':r_f,'remain_t':remain_t}
df = pd.DataFrame(dic)
p(df)
df.to_excel('putcallparitydata_4.xlsx',sheet_name='Sheet1',engine='xlsxwriter')
